#include<map>
vector<int> getTopView(TreeNode<int> *root) {
    map<int, int> topview;
    queue<pair<TreeNode<int>*, int> > q;
    vector<int> ans;
    
    if(root == NULL)
        return ans;
    
    q.push(make_pair(root, 0));
    while(!q.empty()){
        pair<TreeNode<int>*, int> temp = q.front();
        q.pop();
        
        TreeNode<int>* frontNode = temp.first;
        int hd = temp.second;
        
       if(topview.find(hd) == topview.end())
            topview[hd] = frontNode->val;
        
        if(frontNode->left)
             q.push(make_pair(frontNode->left, hd-1));
        
        if(frontNode->right)
             q.push(make_pair(frontNode->right, hd+1));
    }
    for(auto i : topview){
        ans.push_back(i.second);
    }
    return ans;
}
